// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: emulator_service.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace EmulationService {

  /// <summary>Holder for reflection information generated from emulator_service.proto</summary>
  public static partial class EmulatorServiceReflection {

    #region Descriptor
    /// <summary>File descriptor for emulator_service.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static EmulatorServiceReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChZlbXVsYXRvcl9zZXJ2aWNlLnByb3RvEhBFbXVsYXRpb25TZXJ2aWNlIp0B",
            "CgdNWFBEYXRhEjcKCm14cF9jb25maWcYASABKA4yIy5FbXVsYXRpb25TZXJ2",
            "aWNlLk1YUERhdGEuTVhQQ29uZmlnEg0KBXZhbHVlGAIgASgBIkoKCU1YUENv",
            "bmZpZxISCg5JTlZBTElEX0NPTkZJRxAAEgYKAkRJEAESBgoCRE8QAhIHCgNQ",
            "V00QAxIHCgNTUEkQBBIHCgNJMkMQBSLUBAoMUm9ib3RPdXRwdXRzEgsKA2Fw",
            "aRgBIAEoCRITCgtwd21faGVhZGVycxgCIAMoARI5CgZyZWxheXMYAyADKA4y",
            "KS5FbXVsYXRpb25TZXJ2aWNlLlJvYm90T3V0cHV0cy5SZWxheVN0YXRlEhYK",
            "DmFuYWxvZ19vdXRwdXRzGAQgAygCEisKCG14cF9kYXRhGAUgAygLMhkuRW11",
            "bGF0aW9uU2VydmljZS5NWFBEYXRhEhcKD2RpZ2l0YWxfaGVhZGVycxgGIAMo",
            "BRJQChVjYW5fbW90b3JfY29udHJvbGxlcnMYByADKAsyMS5FbXVsYXRpb25T",
            "ZXJ2aWNlLlJvYm90T3V0cHV0cy5DQU5Nb3RvckNvbnRyb2xsZXIahAEKEkNB",
            "Tk1vdG9yQ29udHJvbGxlchI4CghjYW5fdHlwZRgBIAEoDjImLkVtdWxhdGlv",
            "blNlcnZpY2UuUm9ib3RPdXRwdXRzLkNBTlR5cGUSCgoCaWQYAiABKAUSFgoO",
            "cGVyY2VudF9vdXRwdXQYAyABKAISEAoIaW52ZXJ0ZWQYBCABKAgiQgoKUmVs",
            "YXlTdGF0ZRIRCg1JTlZBTElEX1NUQVRFEAASCwoHRk9SV0FSRBABEgsKB1JF",
            "VkVSU0UQAhIHCgNPRkYQAyJsCgdDQU5UeXBlEhQKEElOVkFMSURfQ0FOX1RZ",
            "UEUQABINCglUQUxPTl9TUlgQARIOCgpWSUNUT1JfU1BYEAISDQoJU1BBUktf",
            "TUFYEAMSCwoHVU5LTk9XThAEEgcKA1BDTRAFEgcKA1BEUBAGIt4MCgtSb2Jv",
            "dElucHV0cxIXCg9kaWdpdGFsX2hlYWRlcnMYASADKAgSKwoIbXhwX2RhdGEY",
            "AiADKAsyGS5FbXVsYXRpb25TZXJ2aWNlLk1YUERhdGESOQoJam95c3RpY2tz",
            "GAMgAygLMiYuRW11bGF0aW9uU2VydmljZS5Sb2JvdElucHV0cy5Kb3lzdGlj",
            "axI7CgptYXRjaF9pbmZvGAQgASgLMicuRW11bGF0aW9uU2VydmljZS5Sb2Jv",
            "dElucHV0cy5NYXRjaEluZm8SOwoKcm9ib3RfbW9kZRgFIAEoCzInLkVtdWxh",
            "dGlvblNlcnZpY2UuUm9ib3RJbnB1dHMuUm9ib3RNb2RlEkYKEGVuY29kZXJf",
            "bWFuYWdlcnMYBiADKAsyLC5FbXVsYXRpb25TZXJ2aWNlLlJvYm90SW5wdXRz",
            "LkVuY29kZXJNYW5hZ2VyGrsDCglNYXRjaEluZm8SHQoVZ2FtZV9zcGVjaWZp",
            "Y19tZXNzYWdlGAEgASgJEkUKCm1hdGNoX3R5cGUYAiABKA4yMS5FbXVsYXRp",
            "b25TZXJ2aWNlLlJvYm90SW5wdXRzLk1hdGNoSW5mby5NYXRjaFR5cGUSEgoK",
            "ZXZlbnRfbmFtZRgDIAEoCRIUCgxtYXRjaF9udW1iZXIYBCABKA0SFQoNcmVw",
            "bGF5X251bWJlchgFIAEoDRJWChNhbGxpYW5jZV9zdGF0aW9uX2lkGAYgASgO",
            "MjkuRW11bGF0aW9uU2VydmljZS5Sb2JvdElucHV0cy5NYXRjaEluZm8uQWxs",
            "aWFuY2VTdGF0aW9uSUQSEgoKbWF0Y2hfdGltZRgHIAEoASJHCglNYXRjaFR5",
            "cGUSCAoETk9ORRAAEgwKCFBSQUNUSUNFEAESEQoNUVVBTElGSUNBVElPThAC",
            "Eg8KC0VMSU1JTkFUSU9OEAMiUgoRQWxsaWFuY2VTdGF0aW9uSUQSCAoEUkVE",
            "MRAAEggKBFJFRDIQARIICgRSRUQzEAISCQoFQkxVRTEQAxIJCgVCTFVFMhAE",
            "EgkKBUJMVUUzEAUa8QEKCEpveXN0aWNrEg8KB2lzX3hib3gYASABKAgSDAoE",
            "dHlwZRgCIAEoERIMCgRuYW1lGAMgASgJEg8KB2J1dHRvbnMYBCABKA0SFAoM",
            "YnV0dG9uX2NvdW50GAUgASgREgwKBGF4ZXMYBiADKBESEgoKYXhpc19jb3Vu",
            "dBgHIAEoERISCgpheGlzX3R5cGVzGAggAygNEgwKBHBvdnMYCSADKBESEQoJ",
            "cG92X2NvdW50GAogASgFEg8KB291dHB1dHMYCyABKAUSEwoLbGVmdF9ydW1i",
            "bGUYDCABKAUSFAoMcmlnaHRfcnVtYmxlGA0gASgFGtUBCglSb2JvdE1vZGUS",
            "DwoHZW5hYmxlZBgBIAEoCBIcChRpc19lbWVyZ2VuY3lfc3RvcHBlZBgCIAEo",
            "CBIXCg9pc19mbXNfYXR0YWNoZWQYAyABKAgSFgoOaXNfZHNfYXR0YWNoZWQY",
            "BCABKAgSOgoEbW9kZRgFIAEoDjIsLkVtdWxhdGlvblNlcnZpY2UuUm9ib3RJ",
            "bnB1dHMuUm9ib3RNb2RlLk1vZGUiLAoETW9kZRIOCgpBVVRPTk9NT1VTEAAS",
            "CgoGVEVMRU9QEAESCAoEVEVTVBACGoEDCg5FbmNvZGVyTWFuYWdlchJGCgR0",
            "eXBlGAEgASgOMjguRW11bGF0aW9uU2VydmljZS5Sb2JvdElucHV0cy5FbmNv",
            "ZGVyTWFuYWdlci5FbmNvZGVyVHlwZRINCgVpbmRleBgCIAEoDRIRCglhX2No",
            "YW5uZWwYAyABKA0SRQoGYV90eXBlGAQgASgOMjUuRW11bGF0aW9uU2Vydmlj",
            "ZS5Sb2JvdElucHV0cy5FbmNvZGVyTWFuYWdlci5Qb3J0VHlwZRIRCgliX2No",
            "YW5uZWwYBSABKA0SRQoGYl90eXBlGAYgASgOMjUuRW11bGF0aW9uU2Vydmlj",
            "ZS5Sb2JvdElucHV0cy5FbmNvZGVyTWFuYWdlci5Qb3J0VHlwZRINCgV0aWNr",
            "cxgHIAEoESIaCghQb3J0VHlwZRIGCgJESRAAEgYKAkFJEAEiOQoLRW5jb2Rl",
            "clR5cGUSCwoHSU5WQUxJRBAAEhAKDEZQR0FfRU5DT0RFUhABEgsKB0NPVU5U",
            "RVIQAiJaChhVcGRhdGVSb2JvdElucHV0c1JlcXVlc3QSCwoDYXBpGAEgASgJ",
            "EjEKCmlucHV0X2RhdGEYAiABKAsyHS5FbXVsYXRpb25TZXJ2aWNlLlJvYm90",
            "SW5wdXRzIqQBChlVcGRhdGVSb2JvdElucHV0c1Jlc3BvbnNlEgsKA2FwaRgB",
            "IAEoCRJJCgplcnJvcl9jb2RlGAIgASgOMjUuRW11bGF0aW9uU2VydmljZS5V",
            "cGRhdGVSb2JvdElucHV0c1Jlc3BvbnNlLkVycm9yQ29kZRIPCgdzdWNjZXNz",
            "GAMgASgIIh4KCUVycm9yQ29kZRIRCg1JTlRFUkFMX0VSUk9SEAAiIgoTUm9i",
            "b3RPdXRwdXRzUmVxdWVzdBILCgNhcGkYASABKAkizwEKFFJvYm90T3V0cHV0",
            "c1Jlc3BvbnNlEgsKA2FwaRgBIAEoCRJECgplcnJvcl9jb2RlGAIgASgOMjAu",
            "RW11bGF0aW9uU2VydmljZS5Sb2JvdE91dHB1dHNSZXNwb25zZS5FcnJvckNv",
            "ZGUSDwoHc3VjY2VzcxgDIAEoCBIzCgtvdXRwdXRfZGF0YRgEIAEoCzIeLkVt",
            "dWxhdGlvblNlcnZpY2UuUm9ib3RPdXRwdXRzIh4KCUVycm9yQ29kZRIRCg1J",
            "TlRFUkFMX0VSUk9SEAAyfQoPRW11bGF0aW9uV3JpdGVyEmoKC1JvYm90SW5w",
            "dXRzEiouRW11bGF0aW9uU2VydmljZS5VcGRhdGVSb2JvdElucHV0c1JlcXVl",
            "c3QaKy5FbXVsYXRpb25TZXJ2aWNlLlVwZGF0ZVJvYm90SW5wdXRzUmVzcG9u",
            "c2UiACgBMnQKD0VtdWxhdGlvblJlYWRlchJhCgxSb2JvdE91dHB1dHMSJS5F",
            "bXVsYXRpb25TZXJ2aWNlLlJvYm90T3V0cHV0c1JlcXVlc3QaJi5FbXVsYXRp",
            "b25TZXJ2aWNlLlJvYm90T3V0cHV0c1Jlc3BvbnNlIgAwAWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::EmulationService.MXPData), global::EmulationService.MXPData.Parser, new[]{ "MxpConfig", "Value" }, null, new[]{ typeof(global::EmulationService.MXPData.Types.MXPConfig) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::EmulationService.RobotOutputs), global::EmulationService.RobotOutputs.Parser, new[]{ "Api", "PwmHeaders", "Relays", "AnalogOutputs", "MxpData", "DigitalHeaders", "CanMotorControllers" }, null, new[]{ typeof(global::EmulationService.RobotOutputs.Types.RelayState), typeof(global::EmulationService.RobotOutputs.Types.CANType) }, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::EmulationService.RobotOutputs.Types.CANMotorController), global::EmulationService.RobotOutputs.Types.CANMotorController.Parser, new[]{ "CanType", "Id", "PercentOutput", "Inverted" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::EmulationService.RobotInputs), global::EmulationService.RobotInputs.Parser, new[]{ "DigitalHeaders", "MxpData", "Joysticks", "MatchInfo", "RobotMode", "EncoderManagers" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::EmulationService.RobotInputs.Types.MatchInfo), global::EmulationService.RobotInputs.Types.MatchInfo.Parser, new[]{ "GameSpecificMessage", "MatchType", "EventName", "MatchNumber", "ReplayNumber", "AllianceStationId", "MatchTime" }, null, new[]{ typeof(global::EmulationService.RobotInputs.Types.MatchInfo.Types.MatchType), typeof(global::EmulationService.RobotInputs.Types.MatchInfo.Types.AllianceStationID) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::EmulationService.RobotInputs.Types.Joystick), global::EmulationService.RobotInputs.Types.Joystick.Parser, new[]{ "IsXbox", "Type", "Name", "Buttons", "ButtonCount", "Axes", "AxisCount", "AxisTypes", "Povs", "PovCount", "Outputs", "LeftRumble", "RightRumble" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::EmulationService.RobotInputs.Types.RobotMode), global::EmulationService.RobotInputs.Types.RobotMode.Parser, new[]{ "Enabled", "IsEmergencyStopped", "IsFmsAttached", "IsDsAttached", "Mode" }, null, new[]{ typeof(global::EmulationService.RobotInputs.Types.RobotMode.Types.Mode) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::EmulationService.RobotInputs.Types.EncoderManager), global::EmulationService.RobotInputs.Types.EncoderManager.Parser, new[]{ "Type", "Index", "AChannel", "AType", "BChannel", "BType", "Ticks" }, null, new[]{ typeof(global::EmulationService.RobotInputs.Types.EncoderManager.Types.PortType), typeof(global::EmulationService.RobotInputs.Types.EncoderManager.Types.EncoderType) }, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::EmulationService.UpdateRobotInputsRequest), global::EmulationService.UpdateRobotInputsRequest.Parser, new[]{ "Api", "InputData" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::EmulationService.UpdateRobotInputsResponse), global::EmulationService.UpdateRobotInputsResponse.Parser, new[]{ "Api", "ErrorCode", "Success" }, null, new[]{ typeof(global::EmulationService.UpdateRobotInputsResponse.Types.ErrorCode) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::EmulationService.RobotOutputsRequest), global::EmulationService.RobotOutputsRequest.Parser, new[]{ "Api" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::EmulationService.RobotOutputsResponse), global::EmulationService.RobotOutputsResponse.Parser, new[]{ "Api", "ErrorCode", "Success", "OutputData" }, null, new[]{ typeof(global::EmulationService.RobotOutputsResponse.Types.ErrorCode) }, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class MXPData : pb::IMessage<MXPData> {
    private static readonly pb::MessageParser<MXPData> _parser = new pb::MessageParser<MXPData>(() => new MXPData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MXPData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::EmulationService.EmulatorServiceReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MXPData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MXPData(MXPData other) : this() {
      mxpConfig_ = other.mxpConfig_;
      value_ = other.value_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MXPData Clone() {
      return new MXPData(this);
    }

    /// <summary>Field number for the "mxp_config" field.</summary>
    public const int MxpConfigFieldNumber = 1;
    private global::EmulationService.MXPData.Types.MXPConfig mxpConfig_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::EmulationService.MXPData.Types.MXPConfig MxpConfig {
      get { return mxpConfig_; }
      set {
        mxpConfig_ = value;
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 2;
    private double value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MXPData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MXPData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MxpConfig != other.MxpConfig) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Value, other.Value)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MxpConfig != 0) hash ^= MxpConfig.GetHashCode();
      if (Value != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Value);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MxpConfig != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) MxpConfig);
      }
      if (Value != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(Value);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MxpConfig != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) MxpConfig);
      }
      if (Value != 0D) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MXPData other) {
      if (other == null) {
        return;
      }
      if (other.MxpConfig != 0) {
        MxpConfig = other.MxpConfig;
      }
      if (other.Value != 0D) {
        Value = other.Value;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MxpConfig = (global::EmulationService.MXPData.Types.MXPConfig) input.ReadEnum();
            break;
          }
          case 17: {
            Value = input.ReadDouble();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the MXPData message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum MXPConfig {
        [pbr::OriginalName("INVALID_CONFIG")] InvalidConfig = 0,
        [pbr::OriginalName("DI")] Di = 1,
        [pbr::OriginalName("DO")] Do = 2,
        [pbr::OriginalName("PWM")] Pwm = 3,
        [pbr::OriginalName("SPI")] Spi = 4,
        [pbr::OriginalName("I2C")] I2C = 5,
      }

    }
    #endregion

  }

  public sealed partial class RobotOutputs : pb::IMessage<RobotOutputs> {
    private static readonly pb::MessageParser<RobotOutputs> _parser = new pb::MessageParser<RobotOutputs>(() => new RobotOutputs());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RobotOutputs> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::EmulationService.EmulatorServiceReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RobotOutputs() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RobotOutputs(RobotOutputs other) : this() {
      api_ = other.api_;
      pwmHeaders_ = other.pwmHeaders_.Clone();
      relays_ = other.relays_.Clone();
      analogOutputs_ = other.analogOutputs_.Clone();
      mxpData_ = other.mxpData_.Clone();
      digitalHeaders_ = other.digitalHeaders_.Clone();
      canMotorControllers_ = other.canMotorControllers_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RobotOutputs Clone() {
      return new RobotOutputs(this);
    }

    /// <summary>Field number for the "api" field.</summary>
    public const int ApiFieldNumber = 1;
    private string api_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Api {
      get { return api_; }
      set {
        api_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "pwm_headers" field.</summary>
    public const int PwmHeadersFieldNumber = 2;
    private static readonly pb::FieldCodec<double> _repeated_pwmHeaders_codec
        = pb::FieldCodec.ForDouble(18);
    private readonly pbc::RepeatedField<double> pwmHeaders_ = new pbc::RepeatedField<double>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<double> PwmHeaders {
      get { return pwmHeaders_; }
    }

    /// <summary>Field number for the "relays" field.</summary>
    public const int RelaysFieldNumber = 3;
    private static readonly pb::FieldCodec<global::EmulationService.RobotOutputs.Types.RelayState> _repeated_relays_codec
        = pb::FieldCodec.ForEnum(26, x => (int) x, x => (global::EmulationService.RobotOutputs.Types.RelayState) x);
    private readonly pbc::RepeatedField<global::EmulationService.RobotOutputs.Types.RelayState> relays_ = new pbc::RepeatedField<global::EmulationService.RobotOutputs.Types.RelayState>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::EmulationService.RobotOutputs.Types.RelayState> Relays {
      get { return relays_; }
    }

    /// <summary>Field number for the "analog_outputs" field.</summary>
    public const int AnalogOutputsFieldNumber = 4;
    private static readonly pb::FieldCodec<float> _repeated_analogOutputs_codec
        = pb::FieldCodec.ForFloat(34);
    private readonly pbc::RepeatedField<float> analogOutputs_ = new pbc::RepeatedField<float>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> AnalogOutputs {
      get { return analogOutputs_; }
    }

    /// <summary>Field number for the "mxp_data" field.</summary>
    public const int MxpDataFieldNumber = 5;
    private static readonly pb::FieldCodec<global::EmulationService.MXPData> _repeated_mxpData_codec
        = pb::FieldCodec.ForMessage(42, global::EmulationService.MXPData.Parser);
    private readonly pbc::RepeatedField<global::EmulationService.MXPData> mxpData_ = new pbc::RepeatedField<global::EmulationService.MXPData>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::EmulationService.MXPData> MxpData {
      get { return mxpData_; }
    }

    /// <summary>Field number for the "digital_headers" field.</summary>
    public const int DigitalHeadersFieldNumber = 6;
    private static readonly pb::FieldCodec<int> _repeated_digitalHeaders_codec
        = pb::FieldCodec.ForInt32(50);
    private readonly pbc::RepeatedField<int> digitalHeaders_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> DigitalHeaders {
      get { return digitalHeaders_; }
    }

    /// <summary>Field number for the "can_motor_controllers" field.</summary>
    public const int CanMotorControllersFieldNumber = 7;
    private static readonly pb::FieldCodec<global::EmulationService.RobotOutputs.Types.CANMotorController> _repeated_canMotorControllers_codec
        = pb::FieldCodec.ForMessage(58, global::EmulationService.RobotOutputs.Types.CANMotorController.Parser);
    private readonly pbc::RepeatedField<global::EmulationService.RobotOutputs.Types.CANMotorController> canMotorControllers_ = new pbc::RepeatedField<global::EmulationService.RobotOutputs.Types.CANMotorController>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::EmulationService.RobotOutputs.Types.CANMotorController> CanMotorControllers {
      get { return canMotorControllers_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RobotOutputs);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RobotOutputs other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Api != other.Api) return false;
      if(!pwmHeaders_.Equals(other.pwmHeaders_)) return false;
      if(!relays_.Equals(other.relays_)) return false;
      if(!analogOutputs_.Equals(other.analogOutputs_)) return false;
      if(!mxpData_.Equals(other.mxpData_)) return false;
      if(!digitalHeaders_.Equals(other.digitalHeaders_)) return false;
      if(!canMotorControllers_.Equals(other.canMotorControllers_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Api.Length != 0) hash ^= Api.GetHashCode();
      hash ^= pwmHeaders_.GetHashCode();
      hash ^= relays_.GetHashCode();
      hash ^= analogOutputs_.GetHashCode();
      hash ^= mxpData_.GetHashCode();
      hash ^= digitalHeaders_.GetHashCode();
      hash ^= canMotorControllers_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Api.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Api);
      }
      pwmHeaders_.WriteTo(output, _repeated_pwmHeaders_codec);
      relays_.WriteTo(output, _repeated_relays_codec);
      analogOutputs_.WriteTo(output, _repeated_analogOutputs_codec);
      mxpData_.WriteTo(output, _repeated_mxpData_codec);
      digitalHeaders_.WriteTo(output, _repeated_digitalHeaders_codec);
      canMotorControllers_.WriteTo(output, _repeated_canMotorControllers_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Api.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Api);
      }
      size += pwmHeaders_.CalculateSize(_repeated_pwmHeaders_codec);
      size += relays_.CalculateSize(_repeated_relays_codec);
      size += analogOutputs_.CalculateSize(_repeated_analogOutputs_codec);
      size += mxpData_.CalculateSize(_repeated_mxpData_codec);
      size += digitalHeaders_.CalculateSize(_repeated_digitalHeaders_codec);
      size += canMotorControllers_.CalculateSize(_repeated_canMotorControllers_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RobotOutputs other) {
      if (other == null) {
        return;
      }
      if (other.Api.Length != 0) {
        Api = other.Api;
      }
      pwmHeaders_.Add(other.pwmHeaders_);
      relays_.Add(other.relays_);
      analogOutputs_.Add(other.analogOutputs_);
      mxpData_.Add(other.mxpData_);
      digitalHeaders_.Add(other.digitalHeaders_);
      canMotorControllers_.Add(other.canMotorControllers_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Api = input.ReadString();
            break;
          }
          case 18:
          case 17: {
            pwmHeaders_.AddEntriesFrom(input, _repeated_pwmHeaders_codec);
            break;
          }
          case 26:
          case 24: {
            relays_.AddEntriesFrom(input, _repeated_relays_codec);
            break;
          }
          case 34:
          case 37: {
            analogOutputs_.AddEntriesFrom(input, _repeated_analogOutputs_codec);
            break;
          }
          case 42: {
            mxpData_.AddEntriesFrom(input, _repeated_mxpData_codec);
            break;
          }
          case 50:
          case 48: {
            digitalHeaders_.AddEntriesFrom(input, _repeated_digitalHeaders_codec);
            break;
          }
          case 58: {
            canMotorControllers_.AddEntriesFrom(input, _repeated_canMotorControllers_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the RobotOutputs message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum RelayState {
        [pbr::OriginalName("INVALID_STATE")] InvalidState = 0,
        [pbr::OriginalName("FORWARD")] Forward = 1,
        [pbr::OriginalName("REVERSE")] Reverse = 2,
        [pbr::OriginalName("OFF")] Off = 3,
      }

      public enum CANType {
        [pbr::OriginalName("INVALID_CAN_TYPE")] InvalidCanType = 0,
        [pbr::OriginalName("TALON_SRX")] TalonSrx = 1,
        [pbr::OriginalName("VICTOR_SPX")] VictorSpx = 2,
        [pbr::OriginalName("SPARK_MAX")] SparkMax = 3,
        [pbr::OriginalName("UNKNOWN")] Unknown = 4,
        [pbr::OriginalName("PCM")] Pcm = 5,
        [pbr::OriginalName("PDP")] Pdp = 6,
      }

      public sealed partial class CANMotorController : pb::IMessage<CANMotorController> {
        private static readonly pb::MessageParser<CANMotorController> _parser = new pb::MessageParser<CANMotorController>(() => new CANMotorController());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<CANMotorController> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::EmulationService.RobotOutputs.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CANMotorController() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CANMotorController(CANMotorController other) : this() {
          canType_ = other.canType_;
          id_ = other.id_;
          percentOutput_ = other.percentOutput_;
          inverted_ = other.inverted_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CANMotorController Clone() {
          return new CANMotorController(this);
        }

        /// <summary>Field number for the "can_type" field.</summary>
        public const int CanTypeFieldNumber = 1;
        private global::EmulationService.RobotOutputs.Types.CANType canType_ = 0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::EmulationService.RobotOutputs.Types.CANType CanType {
          get { return canType_; }
          set {
            canType_ = value;
          }
        }

        /// <summary>Field number for the "id" field.</summary>
        public const int IdFieldNumber = 2;
        private int id_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Id {
          get { return id_; }
          set {
            id_ = value;
          }
        }

        /// <summary>Field number for the "percent_output" field.</summary>
        public const int PercentOutputFieldNumber = 3;
        private float percentOutput_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float PercentOutput {
          get { return percentOutput_; }
          set {
            percentOutput_ = value;
          }
        }

        /// <summary>Field number for the "inverted" field.</summary>
        public const int InvertedFieldNumber = 4;
        private bool inverted_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Inverted {
          get { return inverted_; }
          set {
            inverted_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as CANMotorController);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(CANMotorController other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (CanType != other.CanType) return false;
          if (Id != other.Id) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PercentOutput, other.PercentOutput)) return false;
          if (Inverted != other.Inverted) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (CanType != 0) hash ^= CanType.GetHashCode();
          if (Id != 0) hash ^= Id.GetHashCode();
          if (PercentOutput != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PercentOutput);
          if (Inverted != false) hash ^= Inverted.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (CanType != 0) {
            output.WriteRawTag(8);
            output.WriteEnum((int) CanType);
          }
          if (Id != 0) {
            output.WriteRawTag(16);
            output.WriteInt32(Id);
          }
          if (PercentOutput != 0F) {
            output.WriteRawTag(29);
            output.WriteFloat(PercentOutput);
          }
          if (Inverted != false) {
            output.WriteRawTag(32);
            output.WriteBool(Inverted);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (CanType != 0) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) CanType);
          }
          if (Id != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
          }
          if (PercentOutput != 0F) {
            size += 1 + 4;
          }
          if (Inverted != false) {
            size += 1 + 1;
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(CANMotorController other) {
          if (other == null) {
            return;
          }
          if (other.CanType != 0) {
            CanType = other.CanType;
          }
          if (other.Id != 0) {
            Id = other.Id;
          }
          if (other.PercentOutput != 0F) {
            PercentOutput = other.PercentOutput;
          }
          if (other.Inverted != false) {
            Inverted = other.Inverted;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                CanType = (global::EmulationService.RobotOutputs.Types.CANType) input.ReadEnum();
                break;
              }
              case 16: {
                Id = input.ReadInt32();
                break;
              }
              case 29: {
                PercentOutput = input.ReadFloat();
                break;
              }
              case 32: {
                Inverted = input.ReadBool();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class RobotInputs : pb::IMessage<RobotInputs> {
    private static readonly pb::MessageParser<RobotInputs> _parser = new pb::MessageParser<RobotInputs>(() => new RobotInputs());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RobotInputs> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::EmulationService.EmulatorServiceReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RobotInputs() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RobotInputs(RobotInputs other) : this() {
      digitalHeaders_ = other.digitalHeaders_.Clone();
      mxpData_ = other.mxpData_.Clone();
      joysticks_ = other.joysticks_.Clone();
      matchInfo_ = other.matchInfo_ != null ? other.matchInfo_.Clone() : null;
      robotMode_ = other.robotMode_ != null ? other.robotMode_.Clone() : null;
      encoderManagers_ = other.encoderManagers_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RobotInputs Clone() {
      return new RobotInputs(this);
    }

    /// <summary>Field number for the "digital_headers" field.</summary>
    public const int DigitalHeadersFieldNumber = 1;
    private static readonly pb::FieldCodec<bool> _repeated_digitalHeaders_codec
        = pb::FieldCodec.ForBool(10);
    private readonly pbc::RepeatedField<bool> digitalHeaders_ = new pbc::RepeatedField<bool>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<bool> DigitalHeaders {
      get { return digitalHeaders_; }
    }

    /// <summary>Field number for the "mxp_data" field.</summary>
    public const int MxpDataFieldNumber = 2;
    private static readonly pb::FieldCodec<global::EmulationService.MXPData> _repeated_mxpData_codec
        = pb::FieldCodec.ForMessage(18, global::EmulationService.MXPData.Parser);
    private readonly pbc::RepeatedField<global::EmulationService.MXPData> mxpData_ = new pbc::RepeatedField<global::EmulationService.MXPData>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::EmulationService.MXPData> MxpData {
      get { return mxpData_; }
    }

    /// <summary>Field number for the "joysticks" field.</summary>
    public const int JoysticksFieldNumber = 3;
    private static readonly pb::FieldCodec<global::EmulationService.RobotInputs.Types.Joystick> _repeated_joysticks_codec
        = pb::FieldCodec.ForMessage(26, global::EmulationService.RobotInputs.Types.Joystick.Parser);
    private readonly pbc::RepeatedField<global::EmulationService.RobotInputs.Types.Joystick> joysticks_ = new pbc::RepeatedField<global::EmulationService.RobotInputs.Types.Joystick>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::EmulationService.RobotInputs.Types.Joystick> Joysticks {
      get { return joysticks_; }
    }

    /// <summary>Field number for the "match_info" field.</summary>
    public const int MatchInfoFieldNumber = 4;
    private global::EmulationService.RobotInputs.Types.MatchInfo matchInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::EmulationService.RobotInputs.Types.MatchInfo MatchInfo {
      get { return matchInfo_; }
      set {
        matchInfo_ = value;
      }
    }

    /// <summary>Field number for the "robot_mode" field.</summary>
    public const int RobotModeFieldNumber = 5;
    private global::EmulationService.RobotInputs.Types.RobotMode robotMode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::EmulationService.RobotInputs.Types.RobotMode RobotMode {
      get { return robotMode_; }
      set {
        robotMode_ = value;
      }
    }

    /// <summary>Field number for the "encoder_managers" field.</summary>
    public const int EncoderManagersFieldNumber = 6;
    private static readonly pb::FieldCodec<global::EmulationService.RobotInputs.Types.EncoderManager> _repeated_encoderManagers_codec
        = pb::FieldCodec.ForMessage(50, global::EmulationService.RobotInputs.Types.EncoderManager.Parser);
    private readonly pbc::RepeatedField<global::EmulationService.RobotInputs.Types.EncoderManager> encoderManagers_ = new pbc::RepeatedField<global::EmulationService.RobotInputs.Types.EncoderManager>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::EmulationService.RobotInputs.Types.EncoderManager> EncoderManagers {
      get { return encoderManagers_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RobotInputs);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RobotInputs other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!digitalHeaders_.Equals(other.digitalHeaders_)) return false;
      if(!mxpData_.Equals(other.mxpData_)) return false;
      if(!joysticks_.Equals(other.joysticks_)) return false;
      if (!object.Equals(MatchInfo, other.MatchInfo)) return false;
      if (!object.Equals(RobotMode, other.RobotMode)) return false;
      if(!encoderManagers_.Equals(other.encoderManagers_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= digitalHeaders_.GetHashCode();
      hash ^= mxpData_.GetHashCode();
      hash ^= joysticks_.GetHashCode();
      if (matchInfo_ != null) hash ^= MatchInfo.GetHashCode();
      if (robotMode_ != null) hash ^= RobotMode.GetHashCode();
      hash ^= encoderManagers_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      digitalHeaders_.WriteTo(output, _repeated_digitalHeaders_codec);
      mxpData_.WriteTo(output, _repeated_mxpData_codec);
      joysticks_.WriteTo(output, _repeated_joysticks_codec);
      if (matchInfo_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(MatchInfo);
      }
      if (robotMode_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(RobotMode);
      }
      encoderManagers_.WriteTo(output, _repeated_encoderManagers_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += digitalHeaders_.CalculateSize(_repeated_digitalHeaders_codec);
      size += mxpData_.CalculateSize(_repeated_mxpData_codec);
      size += joysticks_.CalculateSize(_repeated_joysticks_codec);
      if (matchInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MatchInfo);
      }
      if (robotMode_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RobotMode);
      }
      size += encoderManagers_.CalculateSize(_repeated_encoderManagers_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RobotInputs other) {
      if (other == null) {
        return;
      }
      digitalHeaders_.Add(other.digitalHeaders_);
      mxpData_.Add(other.mxpData_);
      joysticks_.Add(other.joysticks_);
      if (other.matchInfo_ != null) {
        if (matchInfo_ == null) {
          MatchInfo = new global::EmulationService.RobotInputs.Types.MatchInfo();
        }
        MatchInfo.MergeFrom(other.MatchInfo);
      }
      if (other.robotMode_ != null) {
        if (robotMode_ == null) {
          RobotMode = new global::EmulationService.RobotInputs.Types.RobotMode();
        }
        RobotMode.MergeFrom(other.RobotMode);
      }
      encoderManagers_.Add(other.encoderManagers_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 8: {
            digitalHeaders_.AddEntriesFrom(input, _repeated_digitalHeaders_codec);
            break;
          }
          case 18: {
            mxpData_.AddEntriesFrom(input, _repeated_mxpData_codec);
            break;
          }
          case 26: {
            joysticks_.AddEntriesFrom(input, _repeated_joysticks_codec);
            break;
          }
          case 34: {
            if (matchInfo_ == null) {
              MatchInfo = new global::EmulationService.RobotInputs.Types.MatchInfo();
            }
            input.ReadMessage(MatchInfo);
            break;
          }
          case 42: {
            if (robotMode_ == null) {
              RobotMode = new global::EmulationService.RobotInputs.Types.RobotMode();
            }
            input.ReadMessage(RobotMode);
            break;
          }
          case 50: {
            encoderManagers_.AddEntriesFrom(input, _repeated_encoderManagers_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the RobotInputs message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class MatchInfo : pb::IMessage<MatchInfo> {
        private static readonly pb::MessageParser<MatchInfo> _parser = new pb::MessageParser<MatchInfo>(() => new MatchInfo());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<MatchInfo> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::EmulationService.RobotInputs.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MatchInfo() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MatchInfo(MatchInfo other) : this() {
          gameSpecificMessage_ = other.gameSpecificMessage_;
          matchType_ = other.matchType_;
          eventName_ = other.eventName_;
          matchNumber_ = other.matchNumber_;
          replayNumber_ = other.replayNumber_;
          allianceStationId_ = other.allianceStationId_;
          matchTime_ = other.matchTime_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MatchInfo Clone() {
          return new MatchInfo(this);
        }

        /// <summary>Field number for the "game_specific_message" field.</summary>
        public const int GameSpecificMessageFieldNumber = 1;
        private string gameSpecificMessage_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string GameSpecificMessage {
          get { return gameSpecificMessage_; }
          set {
            gameSpecificMessage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "match_type" field.</summary>
        public const int MatchTypeFieldNumber = 2;
        private global::EmulationService.RobotInputs.Types.MatchInfo.Types.MatchType matchType_ = 0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::EmulationService.RobotInputs.Types.MatchInfo.Types.MatchType MatchType {
          get { return matchType_; }
          set {
            matchType_ = value;
          }
        }

        /// <summary>Field number for the "event_name" field.</summary>
        public const int EventNameFieldNumber = 3;
        private string eventName_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string EventName {
          get { return eventName_; }
          set {
            eventName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "match_number" field.</summary>
        public const int MatchNumberFieldNumber = 4;
        private uint matchNumber_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint MatchNumber {
          get { return matchNumber_; }
          set {
            matchNumber_ = value;
          }
        }

        /// <summary>Field number for the "replay_number" field.</summary>
        public const int ReplayNumberFieldNumber = 5;
        private uint replayNumber_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint ReplayNumber {
          get { return replayNumber_; }
          set {
            replayNumber_ = value;
          }
        }

        /// <summary>Field number for the "alliance_station_id" field.</summary>
        public const int AllianceStationIdFieldNumber = 6;
        private global::EmulationService.RobotInputs.Types.MatchInfo.Types.AllianceStationID allianceStationId_ = 0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::EmulationService.RobotInputs.Types.MatchInfo.Types.AllianceStationID AllianceStationId {
          get { return allianceStationId_; }
          set {
            allianceStationId_ = value;
          }
        }

        /// <summary>Field number for the "match_time" field.</summary>
        public const int MatchTimeFieldNumber = 7;
        private double matchTime_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double MatchTime {
          get { return matchTime_; }
          set {
            matchTime_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as MatchInfo);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(MatchInfo other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (GameSpecificMessage != other.GameSpecificMessage) return false;
          if (MatchType != other.MatchType) return false;
          if (EventName != other.EventName) return false;
          if (MatchNumber != other.MatchNumber) return false;
          if (ReplayNumber != other.ReplayNumber) return false;
          if (AllianceStationId != other.AllianceStationId) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(MatchTime, other.MatchTime)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (GameSpecificMessage.Length != 0) hash ^= GameSpecificMessage.GetHashCode();
          if (MatchType != 0) hash ^= MatchType.GetHashCode();
          if (EventName.Length != 0) hash ^= EventName.GetHashCode();
          if (MatchNumber != 0) hash ^= MatchNumber.GetHashCode();
          if (ReplayNumber != 0) hash ^= ReplayNumber.GetHashCode();
          if (AllianceStationId != 0) hash ^= AllianceStationId.GetHashCode();
          if (MatchTime != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(MatchTime);
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (GameSpecificMessage.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(GameSpecificMessage);
          }
          if (MatchType != 0) {
            output.WriteRawTag(16);
            output.WriteEnum((int) MatchType);
          }
          if (EventName.Length != 0) {
            output.WriteRawTag(26);
            output.WriteString(EventName);
          }
          if (MatchNumber != 0) {
            output.WriteRawTag(32);
            output.WriteUInt32(MatchNumber);
          }
          if (ReplayNumber != 0) {
            output.WriteRawTag(40);
            output.WriteUInt32(ReplayNumber);
          }
          if (AllianceStationId != 0) {
            output.WriteRawTag(48);
            output.WriteEnum((int) AllianceStationId);
          }
          if (MatchTime != 0D) {
            output.WriteRawTag(57);
            output.WriteDouble(MatchTime);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (GameSpecificMessage.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(GameSpecificMessage);
          }
          if (MatchType != 0) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) MatchType);
          }
          if (EventName.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(EventName);
          }
          if (MatchNumber != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MatchNumber);
          }
          if (ReplayNumber != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ReplayNumber);
          }
          if (AllianceStationId != 0) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) AllianceStationId);
          }
          if (MatchTime != 0D) {
            size += 1 + 8;
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(MatchInfo other) {
          if (other == null) {
            return;
          }
          if (other.GameSpecificMessage.Length != 0) {
            GameSpecificMessage = other.GameSpecificMessage;
          }
          if (other.MatchType != 0) {
            MatchType = other.MatchType;
          }
          if (other.EventName.Length != 0) {
            EventName = other.EventName;
          }
          if (other.MatchNumber != 0) {
            MatchNumber = other.MatchNumber;
          }
          if (other.ReplayNumber != 0) {
            ReplayNumber = other.ReplayNumber;
          }
          if (other.AllianceStationId != 0) {
            AllianceStationId = other.AllianceStationId;
          }
          if (other.MatchTime != 0D) {
            MatchTime = other.MatchTime;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                GameSpecificMessage = input.ReadString();
                break;
              }
              case 16: {
                MatchType = (global::EmulationService.RobotInputs.Types.MatchInfo.Types.MatchType) input.ReadEnum();
                break;
              }
              case 26: {
                EventName = input.ReadString();
                break;
              }
              case 32: {
                MatchNumber = input.ReadUInt32();
                break;
              }
              case 40: {
                ReplayNumber = input.ReadUInt32();
                break;
              }
              case 48: {
                AllianceStationId = (global::EmulationService.RobotInputs.Types.MatchInfo.Types.AllianceStationID) input.ReadEnum();
                break;
              }
              case 57: {
                MatchTime = input.ReadDouble();
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the MatchInfo message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          public enum MatchType {
            [pbr::OriginalName("NONE")] None = 0,
            [pbr::OriginalName("PRACTICE")] Practice = 1,
            [pbr::OriginalName("QUALIFICATION")] Qualification = 2,
            [pbr::OriginalName("ELIMINATION")] Elimination = 3,
          }

          public enum AllianceStationID {
            [pbr::OriginalName("RED1")] Red1 = 0,
            [pbr::OriginalName("RED2")] Red2 = 1,
            [pbr::OriginalName("RED3")] Red3 = 2,
            [pbr::OriginalName("BLUE1")] Blue1 = 3,
            [pbr::OriginalName("BLUE2")] Blue2 = 4,
            [pbr::OriginalName("BLUE3")] Blue3 = 5,
          }

        }
        #endregion

      }

      public sealed partial class Joystick : pb::IMessage<Joystick> {
        private static readonly pb::MessageParser<Joystick> _parser = new pb::MessageParser<Joystick>(() => new Joystick());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Joystick> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::EmulationService.RobotInputs.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Joystick() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Joystick(Joystick other) : this() {
          isXbox_ = other.isXbox_;
          type_ = other.type_;
          name_ = other.name_;
          buttons_ = other.buttons_;
          buttonCount_ = other.buttonCount_;
          axes_ = other.axes_.Clone();
          axisCount_ = other.axisCount_;
          axisTypes_ = other.axisTypes_.Clone();
          povs_ = other.povs_.Clone();
          povCount_ = other.povCount_;
          outputs_ = other.outputs_;
          leftRumble_ = other.leftRumble_;
          rightRumble_ = other.rightRumble_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Joystick Clone() {
          return new Joystick(this);
        }

        /// <summary>Field number for the "is_xbox" field.</summary>
        public const int IsXboxFieldNumber = 1;
        private bool isXbox_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool IsXbox {
          get { return isXbox_; }
          set {
            isXbox_ = value;
          }
        }

        /// <summary>Field number for the "type" field.</summary>
        public const int TypeFieldNumber = 2;
        private int type_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Type {
          get { return type_; }
          set {
            type_ = value;
          }
        }

        /// <summary>Field number for the "name" field.</summary>
        public const int NameFieldNumber = 3;
        private string name_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Name {
          get { return name_; }
          set {
            name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "buttons" field.</summary>
        public const int ButtonsFieldNumber = 4;
        private uint buttons_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Buttons {
          get { return buttons_; }
          set {
            buttons_ = value;
          }
        }

        /// <summary>Field number for the "button_count" field.</summary>
        public const int ButtonCountFieldNumber = 5;
        private int buttonCount_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int ButtonCount {
          get { return buttonCount_; }
          set {
            buttonCount_ = value;
          }
        }

        /// <summary>Field number for the "axes" field.</summary>
        public const int AxesFieldNumber = 6;
        private static readonly pb::FieldCodec<int> _repeated_axes_codec
            = pb::FieldCodec.ForSInt32(50);
        private readonly pbc::RepeatedField<int> axes_ = new pbc::RepeatedField<int>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<int> Axes {
          get { return axes_; }
        }

        /// <summary>Field number for the "axis_count" field.</summary>
        public const int AxisCountFieldNumber = 7;
        private int axisCount_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int AxisCount {
          get { return axisCount_; }
          set {
            axisCount_ = value;
          }
        }

        /// <summary>Field number for the "axis_types" field.</summary>
        public const int AxisTypesFieldNumber = 8;
        private static readonly pb::FieldCodec<uint> _repeated_axisTypes_codec
            = pb::FieldCodec.ForUInt32(66);
        private readonly pbc::RepeatedField<uint> axisTypes_ = new pbc::RepeatedField<uint>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<uint> AxisTypes {
          get { return axisTypes_; }
        }

        /// <summary>Field number for the "povs" field.</summary>
        public const int PovsFieldNumber = 9;
        private static readonly pb::FieldCodec<int> _repeated_povs_codec
            = pb::FieldCodec.ForSInt32(74);
        private readonly pbc::RepeatedField<int> povs_ = new pbc::RepeatedField<int>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<int> Povs {
          get { return povs_; }
        }

        /// <summary>Field number for the "pov_count" field.</summary>
        public const int PovCountFieldNumber = 10;
        private int povCount_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int PovCount {
          get { return povCount_; }
          set {
            povCount_ = value;
          }
        }

        /// <summary>Field number for the "outputs" field.</summary>
        public const int OutputsFieldNumber = 11;
        private int outputs_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Outputs {
          get { return outputs_; }
          set {
            outputs_ = value;
          }
        }

        /// <summary>Field number for the "left_rumble" field.</summary>
        public const int LeftRumbleFieldNumber = 12;
        private int leftRumble_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int LeftRumble {
          get { return leftRumble_; }
          set {
            leftRumble_ = value;
          }
        }

        /// <summary>Field number for the "right_rumble" field.</summary>
        public const int RightRumbleFieldNumber = 13;
        private int rightRumble_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int RightRumble {
          get { return rightRumble_; }
          set {
            rightRumble_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Joystick);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Joystick other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (IsXbox != other.IsXbox) return false;
          if (Type != other.Type) return false;
          if (Name != other.Name) return false;
          if (Buttons != other.Buttons) return false;
          if (ButtonCount != other.ButtonCount) return false;
          if(!axes_.Equals(other.axes_)) return false;
          if (AxisCount != other.AxisCount) return false;
          if(!axisTypes_.Equals(other.axisTypes_)) return false;
          if(!povs_.Equals(other.povs_)) return false;
          if (PovCount != other.PovCount) return false;
          if (Outputs != other.Outputs) return false;
          if (LeftRumble != other.LeftRumble) return false;
          if (RightRumble != other.RightRumble) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (IsXbox != false) hash ^= IsXbox.GetHashCode();
          if (Type != 0) hash ^= Type.GetHashCode();
          if (Name.Length != 0) hash ^= Name.GetHashCode();
          if (Buttons != 0) hash ^= Buttons.GetHashCode();
          if (ButtonCount != 0) hash ^= ButtonCount.GetHashCode();
          hash ^= axes_.GetHashCode();
          if (AxisCount != 0) hash ^= AxisCount.GetHashCode();
          hash ^= axisTypes_.GetHashCode();
          hash ^= povs_.GetHashCode();
          if (PovCount != 0) hash ^= PovCount.GetHashCode();
          if (Outputs != 0) hash ^= Outputs.GetHashCode();
          if (LeftRumble != 0) hash ^= LeftRumble.GetHashCode();
          if (RightRumble != 0) hash ^= RightRumble.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (IsXbox != false) {
            output.WriteRawTag(8);
            output.WriteBool(IsXbox);
          }
          if (Type != 0) {
            output.WriteRawTag(16);
            output.WriteSInt32(Type);
          }
          if (Name.Length != 0) {
            output.WriteRawTag(26);
            output.WriteString(Name);
          }
          if (Buttons != 0) {
            output.WriteRawTag(32);
            output.WriteUInt32(Buttons);
          }
          if (ButtonCount != 0) {
            output.WriteRawTag(40);
            output.WriteSInt32(ButtonCount);
          }
          axes_.WriteTo(output, _repeated_axes_codec);
          if (AxisCount != 0) {
            output.WriteRawTag(56);
            output.WriteSInt32(AxisCount);
          }
          axisTypes_.WriteTo(output, _repeated_axisTypes_codec);
          povs_.WriteTo(output, _repeated_povs_codec);
          if (PovCount != 0) {
            output.WriteRawTag(80);
            output.WriteInt32(PovCount);
          }
          if (Outputs != 0) {
            output.WriteRawTag(88);
            output.WriteInt32(Outputs);
          }
          if (LeftRumble != 0) {
            output.WriteRawTag(96);
            output.WriteInt32(LeftRumble);
          }
          if (RightRumble != 0) {
            output.WriteRawTag(104);
            output.WriteInt32(RightRumble);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (IsXbox != false) {
            size += 1 + 1;
          }
          if (Type != 0) {
            size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Type);
          }
          if (Name.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
          }
          if (Buttons != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Buttons);
          }
          if (ButtonCount != 0) {
            size += 1 + pb::CodedOutputStream.ComputeSInt32Size(ButtonCount);
          }
          size += axes_.CalculateSize(_repeated_axes_codec);
          if (AxisCount != 0) {
            size += 1 + pb::CodedOutputStream.ComputeSInt32Size(AxisCount);
          }
          size += axisTypes_.CalculateSize(_repeated_axisTypes_codec);
          size += povs_.CalculateSize(_repeated_povs_codec);
          if (PovCount != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(PovCount);
          }
          if (Outputs != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Outputs);
          }
          if (LeftRumble != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(LeftRumble);
          }
          if (RightRumble != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(RightRumble);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Joystick other) {
          if (other == null) {
            return;
          }
          if (other.IsXbox != false) {
            IsXbox = other.IsXbox;
          }
          if (other.Type != 0) {
            Type = other.Type;
          }
          if (other.Name.Length != 0) {
            Name = other.Name;
          }
          if (other.Buttons != 0) {
            Buttons = other.Buttons;
          }
          if (other.ButtonCount != 0) {
            ButtonCount = other.ButtonCount;
          }
          axes_.Add(other.axes_);
          if (other.AxisCount != 0) {
            AxisCount = other.AxisCount;
          }
          axisTypes_.Add(other.axisTypes_);
          povs_.Add(other.povs_);
          if (other.PovCount != 0) {
            PovCount = other.PovCount;
          }
          if (other.Outputs != 0) {
            Outputs = other.Outputs;
          }
          if (other.LeftRumble != 0) {
            LeftRumble = other.LeftRumble;
          }
          if (other.RightRumble != 0) {
            RightRumble = other.RightRumble;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                IsXbox = input.ReadBool();
                break;
              }
              case 16: {
                Type = input.ReadSInt32();
                break;
              }
              case 26: {
                Name = input.ReadString();
                break;
              }
              case 32: {
                Buttons = input.ReadUInt32();
                break;
              }
              case 40: {
                ButtonCount = input.ReadSInt32();
                break;
              }
              case 50:
              case 48: {
                axes_.AddEntriesFrom(input, _repeated_axes_codec);
                break;
              }
              case 56: {
                AxisCount = input.ReadSInt32();
                break;
              }
              case 66:
              case 64: {
                axisTypes_.AddEntriesFrom(input, _repeated_axisTypes_codec);
                break;
              }
              case 74:
              case 72: {
                povs_.AddEntriesFrom(input, _repeated_povs_codec);
                break;
              }
              case 80: {
                PovCount = input.ReadInt32();
                break;
              }
              case 88: {
                Outputs = input.ReadInt32();
                break;
              }
              case 96: {
                LeftRumble = input.ReadInt32();
                break;
              }
              case 104: {
                RightRumble = input.ReadInt32();
                break;
              }
            }
          }
        }

      }

      public sealed partial class RobotMode : pb::IMessage<RobotMode> {
        private static readonly pb::MessageParser<RobotMode> _parser = new pb::MessageParser<RobotMode>(() => new RobotMode());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<RobotMode> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::EmulationService.RobotInputs.Descriptor.NestedTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RobotMode() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RobotMode(RobotMode other) : this() {
          enabled_ = other.enabled_;
          isEmergencyStopped_ = other.isEmergencyStopped_;
          isFmsAttached_ = other.isFmsAttached_;
          isDsAttached_ = other.isDsAttached_;
          mode_ = other.mode_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RobotMode Clone() {
          return new RobotMode(this);
        }

        /// <summary>Field number for the "enabled" field.</summary>
        public const int EnabledFieldNumber = 1;
        private bool enabled_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Enabled {
          get { return enabled_; }
          set {
            enabled_ = value;
          }
        }

        /// <summary>Field number for the "is_emergency_stopped" field.</summary>
        public const int IsEmergencyStoppedFieldNumber = 2;
        private bool isEmergencyStopped_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool IsEmergencyStopped {
          get { return isEmergencyStopped_; }
          set {
            isEmergencyStopped_ = value;
          }
        }

        /// <summary>Field number for the "is_fms_attached" field.</summary>
        public const int IsFmsAttachedFieldNumber = 3;
        private bool isFmsAttached_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool IsFmsAttached {
          get { return isFmsAttached_; }
          set {
            isFmsAttached_ = value;
          }
        }

        /// <summary>Field number for the "is_ds_attached" field.</summary>
        public const int IsDsAttachedFieldNumber = 4;
        private bool isDsAttached_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool IsDsAttached {
          get { return isDsAttached_; }
          set {
            isDsAttached_ = value;
          }
        }

        /// <summary>Field number for the "mode" field.</summary>
        public const int ModeFieldNumber = 5;
        private global::EmulationService.RobotInputs.Types.RobotMode.Types.Mode mode_ = 0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::EmulationService.RobotInputs.Types.RobotMode.Types.Mode Mode {
          get { return mode_; }
          set {
            mode_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as RobotMode);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(RobotMode other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Enabled != other.Enabled) return false;
          if (IsEmergencyStopped != other.IsEmergencyStopped) return false;
          if (IsFmsAttached != other.IsFmsAttached) return false;
          if (IsDsAttached != other.IsDsAttached) return false;
          if (Mode != other.Mode) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Enabled != false) hash ^= Enabled.GetHashCode();
          if (IsEmergencyStopped != false) hash ^= IsEmergencyStopped.GetHashCode();
          if (IsFmsAttached != false) hash ^= IsFmsAttached.GetHashCode();
          if (IsDsAttached != false) hash ^= IsDsAttached.GetHashCode();
          if (Mode != 0) hash ^= Mode.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Enabled != false) {
            output.WriteRawTag(8);
            output.WriteBool(Enabled);
          }
          if (IsEmergencyStopped != false) {
            output.WriteRawTag(16);
            output.WriteBool(IsEmergencyStopped);
          }
          if (IsFmsAttached != false) {
            output.WriteRawTag(24);
            output.WriteBool(IsFmsAttached);
          }
          if (IsDsAttached != false) {
            output.WriteRawTag(32);
            output.WriteBool(IsDsAttached);
          }
          if (Mode != 0) {
            output.WriteRawTag(40);
            output.WriteEnum((int) Mode);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Enabled != false) {
            size += 1 + 1;
          }
          if (IsEmergencyStopped != false) {
            size += 1 + 1;
          }
          if (IsFmsAttached != false) {
            size += 1 + 1;
          }
          if (IsDsAttached != false) {
            size += 1 + 1;
          }
          if (Mode != 0) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Mode);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(RobotMode other) {
          if (other == null) {
            return;
          }
          if (other.Enabled != false) {
            Enabled = other.Enabled;
          }
          if (other.IsEmergencyStopped != false) {
            IsEmergencyStopped = other.IsEmergencyStopped;
          }
          if (other.IsFmsAttached != false) {
            IsFmsAttached = other.IsFmsAttached;
          }
          if (other.IsDsAttached != false) {
            IsDsAttached = other.IsDsAttached;
          }
          if (other.Mode != 0) {
            Mode = other.Mode;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Enabled = input.ReadBool();
                break;
              }
              case 16: {
                IsEmergencyStopped = input.ReadBool();
                break;
              }
              case 24: {
                IsFmsAttached = input.ReadBool();
                break;
              }
              case 32: {
                IsDsAttached = input.ReadBool();
                break;
              }
              case 40: {
                Mode = (global::EmulationService.RobotInputs.Types.RobotMode.Types.Mode) input.ReadEnum();
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the RobotMode message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          public enum Mode {
            [pbr::OriginalName("AUTONOMOUS")] Autonomous = 0,
            [pbr::OriginalName("TELEOP")] Teleop = 1,
            [pbr::OriginalName("TEST")] Test = 2,
          }

        }
        #endregion

      }

      public sealed partial class EncoderManager : pb::IMessage<EncoderManager> {
        private static readonly pb::MessageParser<EncoderManager> _parser = new pb::MessageParser<EncoderManager>(() => new EncoderManager());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<EncoderManager> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::EmulationService.RobotInputs.Descriptor.NestedTypes[3]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public EncoderManager() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public EncoderManager(EncoderManager other) : this() {
          type_ = other.type_;
          index_ = other.index_;
          aChannel_ = other.aChannel_;
          aType_ = other.aType_;
          bChannel_ = other.bChannel_;
          bType_ = other.bType_;
          ticks_ = other.ticks_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public EncoderManager Clone() {
          return new EncoderManager(this);
        }

        /// <summary>Field number for the "type" field.</summary>
        public const int TypeFieldNumber = 1;
        private global::EmulationService.RobotInputs.Types.EncoderManager.Types.EncoderType type_ = 0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::EmulationService.RobotInputs.Types.EncoderManager.Types.EncoderType Type {
          get { return type_; }
          set {
            type_ = value;
          }
        }

        /// <summary>Field number for the "index" field.</summary>
        public const int IndexFieldNumber = 2;
        private uint index_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Index {
          get { return index_; }
          set {
            index_ = value;
          }
        }

        /// <summary>Field number for the "a_channel" field.</summary>
        public const int AChannelFieldNumber = 3;
        private uint aChannel_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint AChannel {
          get { return aChannel_; }
          set {
            aChannel_ = value;
          }
        }

        /// <summary>Field number for the "a_type" field.</summary>
        public const int ATypeFieldNumber = 4;
        private global::EmulationService.RobotInputs.Types.EncoderManager.Types.PortType aType_ = 0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::EmulationService.RobotInputs.Types.EncoderManager.Types.PortType AType {
          get { return aType_; }
          set {
            aType_ = value;
          }
        }

        /// <summary>Field number for the "b_channel" field.</summary>
        public const int BChannelFieldNumber = 5;
        private uint bChannel_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint BChannel {
          get { return bChannel_; }
          set {
            bChannel_ = value;
          }
        }

        /// <summary>Field number for the "b_type" field.</summary>
        public const int BTypeFieldNumber = 6;
        private global::EmulationService.RobotInputs.Types.EncoderManager.Types.PortType bType_ = 0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::EmulationService.RobotInputs.Types.EncoderManager.Types.PortType BType {
          get { return bType_; }
          set {
            bType_ = value;
          }
        }

        /// <summary>Field number for the "ticks" field.</summary>
        public const int TicksFieldNumber = 7;
        private int ticks_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Ticks {
          get { return ticks_; }
          set {
            ticks_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as EncoderManager);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(EncoderManager other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Type != other.Type) return false;
          if (Index != other.Index) return false;
          if (AChannel != other.AChannel) return false;
          if (AType != other.AType) return false;
          if (BChannel != other.BChannel) return false;
          if (BType != other.BType) return false;
          if (Ticks != other.Ticks) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Type != 0) hash ^= Type.GetHashCode();
          if (Index != 0) hash ^= Index.GetHashCode();
          if (AChannel != 0) hash ^= AChannel.GetHashCode();
          if (AType != 0) hash ^= AType.GetHashCode();
          if (BChannel != 0) hash ^= BChannel.GetHashCode();
          if (BType != 0) hash ^= BType.GetHashCode();
          if (Ticks != 0) hash ^= Ticks.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Type != 0) {
            output.WriteRawTag(8);
            output.WriteEnum((int) Type);
          }
          if (Index != 0) {
            output.WriteRawTag(16);
            output.WriteUInt32(Index);
          }
          if (AChannel != 0) {
            output.WriteRawTag(24);
            output.WriteUInt32(AChannel);
          }
          if (AType != 0) {
            output.WriteRawTag(32);
            output.WriteEnum((int) AType);
          }
          if (BChannel != 0) {
            output.WriteRawTag(40);
            output.WriteUInt32(BChannel);
          }
          if (BType != 0) {
            output.WriteRawTag(48);
            output.WriteEnum((int) BType);
          }
          if (Ticks != 0) {
            output.WriteRawTag(56);
            output.WriteSInt32(Ticks);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Type != 0) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
          }
          if (Index != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Index);
          }
          if (AChannel != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AChannel);
          }
          if (AType != 0) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) AType);
          }
          if (BChannel != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BChannel);
          }
          if (BType != 0) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) BType);
          }
          if (Ticks != 0) {
            size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Ticks);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(EncoderManager other) {
          if (other == null) {
            return;
          }
          if (other.Type != 0) {
            Type = other.Type;
          }
          if (other.Index != 0) {
            Index = other.Index;
          }
          if (other.AChannel != 0) {
            AChannel = other.AChannel;
          }
          if (other.AType != 0) {
            AType = other.AType;
          }
          if (other.BChannel != 0) {
            BChannel = other.BChannel;
          }
          if (other.BType != 0) {
            BType = other.BType;
          }
          if (other.Ticks != 0) {
            Ticks = other.Ticks;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Type = (global::EmulationService.RobotInputs.Types.EncoderManager.Types.EncoderType) input.ReadEnum();
                break;
              }
              case 16: {
                Index = input.ReadUInt32();
                break;
              }
              case 24: {
                AChannel = input.ReadUInt32();
                break;
              }
              case 32: {
                AType = (global::EmulationService.RobotInputs.Types.EncoderManager.Types.PortType) input.ReadEnum();
                break;
              }
              case 40: {
                BChannel = input.ReadUInt32();
                break;
              }
              case 48: {
                BType = (global::EmulationService.RobotInputs.Types.EncoderManager.Types.PortType) input.ReadEnum();
                break;
              }
              case 56: {
                Ticks = input.ReadSInt32();
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the EncoderManager message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          public enum PortType {
            [pbr::OriginalName("DI")] Di = 0,
            [pbr::OriginalName("AI")] Ai = 1,
          }

          public enum EncoderType {
            [pbr::OriginalName("INVALID")] Invalid = 0,
            [pbr::OriginalName("FPGA_ENCODER")] FpgaEncoder = 1,
            [pbr::OriginalName("COUNTER")] Counter = 2,
          }

        }
        #endregion

      }

    }
    #endregion

  }

  public sealed partial class UpdateRobotInputsRequest : pb::IMessage<UpdateRobotInputsRequest> {
    private static readonly pb::MessageParser<UpdateRobotInputsRequest> _parser = new pb::MessageParser<UpdateRobotInputsRequest>(() => new UpdateRobotInputsRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdateRobotInputsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::EmulationService.EmulatorServiceReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateRobotInputsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateRobotInputsRequest(UpdateRobotInputsRequest other) : this() {
      api_ = other.api_;
      inputData_ = other.inputData_ != null ? other.inputData_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateRobotInputsRequest Clone() {
      return new UpdateRobotInputsRequest(this);
    }

    /// <summary>Field number for the "api" field.</summary>
    public const int ApiFieldNumber = 1;
    private string api_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Api {
      get { return api_; }
      set {
        api_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "input_data" field.</summary>
    public const int InputDataFieldNumber = 2;
    private global::EmulationService.RobotInputs inputData_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::EmulationService.RobotInputs InputData {
      get { return inputData_; }
      set {
        inputData_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdateRobotInputsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdateRobotInputsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Api != other.Api) return false;
      if (!object.Equals(InputData, other.InputData)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Api.Length != 0) hash ^= Api.GetHashCode();
      if (inputData_ != null) hash ^= InputData.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Api.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Api);
      }
      if (inputData_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(InputData);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Api.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Api);
      }
      if (inputData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(InputData);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdateRobotInputsRequest other) {
      if (other == null) {
        return;
      }
      if (other.Api.Length != 0) {
        Api = other.Api;
      }
      if (other.inputData_ != null) {
        if (inputData_ == null) {
          InputData = new global::EmulationService.RobotInputs();
        }
        InputData.MergeFrom(other.InputData);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Api = input.ReadString();
            break;
          }
          case 18: {
            if (inputData_ == null) {
              InputData = new global::EmulationService.RobotInputs();
            }
            input.ReadMessage(InputData);
            break;
          }
        }
      }
    }

  }

  public sealed partial class UpdateRobotInputsResponse : pb::IMessage<UpdateRobotInputsResponse> {
    private static readonly pb::MessageParser<UpdateRobotInputsResponse> _parser = new pb::MessageParser<UpdateRobotInputsResponse>(() => new UpdateRobotInputsResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdateRobotInputsResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::EmulationService.EmulatorServiceReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateRobotInputsResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateRobotInputsResponse(UpdateRobotInputsResponse other) : this() {
      api_ = other.api_;
      errorCode_ = other.errorCode_;
      success_ = other.success_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateRobotInputsResponse Clone() {
      return new UpdateRobotInputsResponse(this);
    }

    /// <summary>Field number for the "api" field.</summary>
    public const int ApiFieldNumber = 1;
    private string api_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Api {
      get { return api_; }
      set {
        api_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "error_code" field.</summary>
    public const int ErrorCodeFieldNumber = 2;
    private global::EmulationService.UpdateRobotInputsResponse.Types.ErrorCode errorCode_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::EmulationService.UpdateRobotInputsResponse.Types.ErrorCode ErrorCode {
      get { return errorCode_; }
      set {
        errorCode_ = value;
      }
    }

    /// <summary>Field number for the "success" field.</summary>
    public const int SuccessFieldNumber = 3;
    private bool success_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Success {
      get { return success_; }
      set {
        success_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdateRobotInputsResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdateRobotInputsResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Api != other.Api) return false;
      if (ErrorCode != other.ErrorCode) return false;
      if (Success != other.Success) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Api.Length != 0) hash ^= Api.GetHashCode();
      if (ErrorCode != 0) hash ^= ErrorCode.GetHashCode();
      if (Success != false) hash ^= Success.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Api.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Api);
      }
      if (ErrorCode != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) ErrorCode);
      }
      if (Success != false) {
        output.WriteRawTag(24);
        output.WriteBool(Success);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Api.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Api);
      }
      if (ErrorCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ErrorCode);
      }
      if (Success != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdateRobotInputsResponse other) {
      if (other == null) {
        return;
      }
      if (other.Api.Length != 0) {
        Api = other.Api;
      }
      if (other.ErrorCode != 0) {
        ErrorCode = other.ErrorCode;
      }
      if (other.Success != false) {
        Success = other.Success;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Api = input.ReadString();
            break;
          }
          case 16: {
            ErrorCode = (global::EmulationService.UpdateRobotInputsResponse.Types.ErrorCode) input.ReadEnum();
            break;
          }
          case 24: {
            Success = input.ReadBool();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the UpdateRobotInputsResponse message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum ErrorCode {
        [pbr::OriginalName("INTERAL_ERROR")] InteralError = 0,
      }

    }
    #endregion

  }

  public sealed partial class RobotOutputsRequest : pb::IMessage<RobotOutputsRequest> {
    private static readonly pb::MessageParser<RobotOutputsRequest> _parser = new pb::MessageParser<RobotOutputsRequest>(() => new RobotOutputsRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RobotOutputsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::EmulationService.EmulatorServiceReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RobotOutputsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RobotOutputsRequest(RobotOutputsRequest other) : this() {
      api_ = other.api_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RobotOutputsRequest Clone() {
      return new RobotOutputsRequest(this);
    }

    /// <summary>Field number for the "api" field.</summary>
    public const int ApiFieldNumber = 1;
    private string api_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Api {
      get { return api_; }
      set {
        api_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RobotOutputsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RobotOutputsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Api != other.Api) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Api.Length != 0) hash ^= Api.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Api.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Api);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Api.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Api);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RobotOutputsRequest other) {
      if (other == null) {
        return;
      }
      if (other.Api.Length != 0) {
        Api = other.Api;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Api = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RobotOutputsResponse : pb::IMessage<RobotOutputsResponse> {
    private static readonly pb::MessageParser<RobotOutputsResponse> _parser = new pb::MessageParser<RobotOutputsResponse>(() => new RobotOutputsResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RobotOutputsResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::EmulationService.EmulatorServiceReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RobotOutputsResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RobotOutputsResponse(RobotOutputsResponse other) : this() {
      api_ = other.api_;
      errorCode_ = other.errorCode_;
      success_ = other.success_;
      outputData_ = other.outputData_ != null ? other.outputData_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RobotOutputsResponse Clone() {
      return new RobotOutputsResponse(this);
    }

    /// <summary>Field number for the "api" field.</summary>
    public const int ApiFieldNumber = 1;
    private string api_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Api {
      get { return api_; }
      set {
        api_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "error_code" field.</summary>
    public const int ErrorCodeFieldNumber = 2;
    private global::EmulationService.RobotOutputsResponse.Types.ErrorCode errorCode_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::EmulationService.RobotOutputsResponse.Types.ErrorCode ErrorCode {
      get { return errorCode_; }
      set {
        errorCode_ = value;
      }
    }

    /// <summary>Field number for the "success" field.</summary>
    public const int SuccessFieldNumber = 3;
    private bool success_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Success {
      get { return success_; }
      set {
        success_ = value;
      }
    }

    /// <summary>Field number for the "output_data" field.</summary>
    public const int OutputDataFieldNumber = 4;
    private global::EmulationService.RobotOutputs outputData_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::EmulationService.RobotOutputs OutputData {
      get { return outputData_; }
      set {
        outputData_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RobotOutputsResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RobotOutputsResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Api != other.Api) return false;
      if (ErrorCode != other.ErrorCode) return false;
      if (Success != other.Success) return false;
      if (!object.Equals(OutputData, other.OutputData)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Api.Length != 0) hash ^= Api.GetHashCode();
      if (ErrorCode != 0) hash ^= ErrorCode.GetHashCode();
      if (Success != false) hash ^= Success.GetHashCode();
      if (outputData_ != null) hash ^= OutputData.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Api.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Api);
      }
      if (ErrorCode != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) ErrorCode);
      }
      if (Success != false) {
        output.WriteRawTag(24);
        output.WriteBool(Success);
      }
      if (outputData_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(OutputData);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Api.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Api);
      }
      if (ErrorCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ErrorCode);
      }
      if (Success != false) {
        size += 1 + 1;
      }
      if (outputData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(OutputData);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RobotOutputsResponse other) {
      if (other == null) {
        return;
      }
      if (other.Api.Length != 0) {
        Api = other.Api;
      }
      if (other.ErrorCode != 0) {
        ErrorCode = other.ErrorCode;
      }
      if (other.Success != false) {
        Success = other.Success;
      }
      if (other.outputData_ != null) {
        if (outputData_ == null) {
          OutputData = new global::EmulationService.RobotOutputs();
        }
        OutputData.MergeFrom(other.OutputData);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Api = input.ReadString();
            break;
          }
          case 16: {
            ErrorCode = (global::EmulationService.RobotOutputsResponse.Types.ErrorCode) input.ReadEnum();
            break;
          }
          case 24: {
            Success = input.ReadBool();
            break;
          }
          case 34: {
            if (outputData_ == null) {
              OutputData = new global::EmulationService.RobotOutputs();
            }
            input.ReadMessage(OutputData);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the RobotOutputsResponse message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum ErrorCode {
        [pbr::OriginalName("INTERAL_ERROR")] InteralError = 0,
      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
